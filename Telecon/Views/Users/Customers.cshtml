@model Telecon.Models.Customer
@{
    Layout = "~/Views/Estructura/_Layout.cshtml";
    Page.Title = "Telecon Erickson C.A - My Customers";
}


<h2 id="TClientes">CUSTOMERS LIST</h2>


<div class="ClientsBlock">
    <button type="button" id="AgregarCB" onclick="AddCB();">Add Customer<div id="AgregarC"></div></button>
    <button type="button" id="ModificarCB" onclick="EditCB();">Edit Customer<div id="ModificarC"></div></button>
    <button type="button" id="EliminarCB" onclick="DeleteCB();">Delete Customer<div id="EliminarC"></div></button>
</div>

@using (@Html.BeginForm("", "", FormMethod.Post, new { autocomplete = "off" }))
{
    @Html.AntiForgeryToken()
    <div id="VAgregarC" class="VentanaAgregarC">
        <div>
            <span class="pull-right glyphicon glyphicon-off" id="CerrarVentanaAgregarC" onclick="CloseWindow();"></span>
            <h2>Add New Customer</h2>
            <hr />
            <p>Company's Name</p>
            @Html.TextBoxFor(model => model.razonsocial, new { @value = "", maxlength = "128", required = "required" })
            <p>Names</p>
            @Html.TextBoxFor(model => model.nombres, new { minlength = "3", @value = "", maxlength = "72", onkeypress = "validatenames(event)" })
            <p>Lastnames</p>
            @Html.TextBoxFor(model => model.apellidos, new { minlength = "2", @value = "", maxlength = "72", onkeypress = "validatenames(event)" })
            <p>Phone Number</p>
            @Html.TextBoxFor(model => model.telefono, new { @value = "", maxlength = "50", required = "required", onkeypress = "validatenum(event)" })
            <p>Address</p>
            @Html.TextBoxFor(model => model.direccion, new { @value = "", maxlength = "128", required = "required" })
            <p>Note</p>
            @Html.TextAreaFor(model => model.comentarios, new { @value = "", maxlength = "128" })
            <button type="submit">Add</button>
            <button type="reset">Reset</button>

        </div>
    </div>
}

@using (@Html.BeginForm("", "", FormMethod.Post, new { autocomplete = "off" }))
{
    @Html.AntiForgeryToken()
    <div id="VModificarC" class="VentanaModificarC">
        <div>
            <span class="pull-right glyphicon glyphicon-off" id="CerrarVentanaModificarC" onclick="CloseWindow();"></span>
            <h2>Edit Customer</h2>
            <hr />
            <p id="NombreCliente">Customer</p>
            <select id="SeleccionCliente">
                <option value="A">Cristian González</option>
                <option value="B">Kevin Reinbold</option>
                <option value="C">Telecon Erickson C.A</option>
                <option value="D">Carnicería Bolivar</option>
            </select>
            <p>Company's Name</p>
            @Html.TextBoxFor(model => model.razonsocial, new { @value = "", maxlength = "128", required = "required" })
            <p>Names</p>
            @Html.TextBoxFor(model => model.nombres, new { minlength = "3", @value = "", maxlength = "72", onkeypress = "validatenames(event)" })
            <p>Lastnames</p>
            @Html.TextBoxFor(model => model.apellidos, new { minlength = "2", @value = "", maxlength = "72", onkeypress = "validatenames(event)" })
            <p>Phone Number</p>
            @Html.TextBoxFor(model => model.telefono, new { @value = "", maxlength = "50", required = "required", onkeypress = "validatenum(event)" })
            <p>Address</p>
            @Html.TextBoxFor(model => model.direccion, new { @value = "", maxlength = "128", required = "required" })
            <p>Note</p>
            @Html.TextAreaFor(model => model.comentarios, new { @value = "", maxlength = "128" })
            <button type="submit">Update</button>
            <button type="reset">Reset</button>

        </div>
    </div>
}

@using (@Html.BeginForm("", "", FormMethod.Post, new { autocomplete = "off" }))
{
    @Html.AntiForgeryToken()
    <div id="VEliminarC" class="VentanaEliminarC">
        <div>
            <span class="pull-right glyphicon glyphicon-off" id="CerrarVentanaEliminarC" onclick="CloseWindow();"></span>
            <h2>Delete Customer(s)</h2>
            <hr /><br />
            <p>¿Are you sure you wish to delete the following users from your list?</p>
            <div id="EListaClientes">
                <table border="1">
                    <tr>
                        <td colspan="2">Customers</td>
                    </tr>
                    <tr>
                        <td>Company's Name</td>
                        <td>Address</td>
                    </tr>

                </table>
            </div>

            <button type="submit">Yes</button>
            <button type="button" id="NoEliminarCliente" onclick="CloseWindow();">No</button>

        </div>
    </div>
}


<div id="validacion" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button id="cerrar-validacion" type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">x</span>
                </button>
            </div>
            <div id="validaciones-contenido" class="modal-body">


            </div>
            <div class="modal-footer">

            </div>
        </div>
    </div>
</div>






<table class="TablaClientes">
    <tr>
        <th></th>
        <th>N°</th>
        <th>Company's Name</th>
        <th>Names</th>
        <th>Lastnames</th>
        <th>Phone</th>
        <th>Address</th>
    </tr>

</table>

<script type="text/javascript">

    function validatenames(evt) {
        var theEvent = evt || window.event;

        // Handle paste
        if (theEvent.type === 'paste') {
            key = event.clipboardData.getData('text/plain');
        } else {
            // Handle key press
            var key = theEvent.keyCode || theEvent.which;
            key = String.fromCharCode(key);
        }
        var regex = /[a-zA-Z\s]|\./;
        if (!regex.test(key)) {
            theEvent.returnValue = false;
            if (theEvent.preventDefault) theEvent.preventDefault();
        }
    }

    function validatenum(evt) {
        var theEvent = evt || window.event;

        // Handle paste
        if (theEvent.type === 'paste') {
            key = event.clipboardData.getData('text/plain');
        } else {
            // Handle key press
            var key = theEvent.keyCode || theEvent.which;
            key = String.fromCharCode(key);
        }
        var regex = /[-+0-9\s]|\./;
        if (!regex.test(key)) {
            theEvent.returnValue = false;
            if (theEvent.preventDefault) theEvent.preventDefault();
        }
    }

    function AddCB() {
        window.location.href = "#VAgregarC";
    }

    function EditCB() {
        window.location.href = "#VModificarC";
    }

    function DeleteCB() {
        window.location.href = "#VEliminarC";
    }

    function CloseWindow() {
        window.location.href = "customers";
    }

    function Español() {
        window.location.href = "/es/perfil/clientes";
    }

    function English() {
        window.location.href = "/en/profile/customers";
    }

</script>