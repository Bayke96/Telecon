@model Telecon.Models.Customer
@{
    Layout = "~/Views/Estructura/_Forma.cshtml";
    Page.Title = "Telecon Erickson C.A - Mis Clientes";
}


<h2 id="TClientes">LISTA DE CLIENTES</h2>


<div class="ClientsBlock">
    <button type="button" id="AgregarCB">Agregar Cliente<div id="AgregarC"></div></button>
    <button type="button" id="ModificarCB">Modificar Cliente<div id="ModificarC"></div></button>
    <button type="button" id="EliminarCB">Eliminar Cliente<div id="EliminarC"></div></button>
</div>


@using (@Html.BeginForm("", "", FormMethod.Post, new { autocomplete = "off" }))
{
    @Html.AntiForgeryToken()
    <div id="VAgregarC" class="VentanaAgregarC">
        <div>
            <span class="pull-right glyphicon glyphicon-off" id="CerrarVentanaAgregarC"></span>
            <h2>Agregar Nuevo Cliente</h2>
            <hr />
            <p>Razón Social</p>
            @Html.TextBoxFor(model => model.razonsocial, new { @value = "", maxlength="128", required = "required" })
            <p>Nombres</p>
            @Html.TextBoxFor(model => model.nombres, new { minlength="3", @value = "" , maxlength="72", onkeypress = "validatenames(event)" })
            <p>Apellidos</p>
            @Html.TextBoxFor(model => model.apellidos, new { minlength = "2", @value = "", maxlength="72", onkeypress = "validatenames(event)" })
            <p>Teléfono</p>
            @Html.TextBoxFor(model => model.telefono, new { @value = "", maxlength = "50", required = "required", onkeypress = "validatenum(event)" })
            <p>Dirección</p>
            @Html.TextBoxFor(model => model.direccion, new { @value = "", maxlength = "128", required = "required" })
            <p>Comentarios</p>
            @Html.TextAreaFor(model => model.comentarios, new { @value = "", maxlength = "128" })
            <button type="submit">Agregar</button>
            <button type="reset">Borrar</button>

        </div>
    </div>
}

@using (@Html.BeginForm("", "", FormMethod.Post, new { autocomplete = "off" }))
{
    @Html.AntiForgeryToken()
    <div id="VModificarC" class="VentanaModificarC">
        <div>
            <span class="pull-right glyphicon glyphicon-off" id="CerrarVentanaModificarC"></span>
            <h2>Modificar Cliente Existente</h2>
            <hr />
            <p id="NombreCliente">Cliente</p>
            <select id="SeleccionCliente">
                <option value="A">Cristian González</option>
                <option value="B">Kevin Reinbold</option>
                <option value="C">Telecon Erickson C.A</option>
                <option value="D">Carnicería Bolivar</option>
            </select>
            <p>Razón Social</p>
            @Html.TextBoxFor(model => model.razonsocial, new { @value = "", maxlength = "128", required = "required" })
            <p>Nombres</p>
            @Html.TextBoxFor(model => model.nombres, new { @value = "", maxlength = "72", onkeypress = "validatenames(event)" })
            <p>Apellidos</p>
            @Html.TextBoxFor(model => model.apellidos, new { @value = "", maxlength = "72", onkeypress = "validatenames(event)" })
            <p>Teléfono</p>
            @Html.TextBoxFor(model => model.telefono, new { @value = "", maxlength = "50", required = "required", onkeypress = "validatenum(event)" })
            <p>Dirección</p>
            @Html.TextBoxFor(model => model.direccion, new { @value = "", maxlength = "128", required = "required" })
            <p>Comentarios</p>
            @Html.TextAreaFor(model => model.comentarios, new { @value = "", maxlength = "128" })
            <button type="submit">Actualizar</button>
            <button type="reset">Borrar</button>

        </div>
    </div>
}

@using (@Html.BeginForm("", "", FormMethod.Post, new { autocomplete = "off" }))
{
    @Html.AntiForgeryToken()
    <div id="VEliminarC" class="VentanaEliminarC">
        <div>
            <span class="pull-right glyphicon glyphicon-off" id="CerrarVentanaEliminarC"></span>
            <h2>Eliminar Clientes</h2>
            <hr /><br />
            <p>¿Está seguro de que desea eliminar a los siguientes clientes de su lista?</p>
            <div id="EListaClientes">
                <table border="1">
                    <tr>
                        <td colspan="2">Clientes</td>
                    </tr>
                    <tr>
                        <td>Razón Social</td>
                        <td>Dirección</td>
                    </tr>
                    
                </table>
            </div>

            <button type="submit">Si</button>
            <button type="button" id="NoEliminarCliente">No</button>

        </div>
    </div>
}


    <div id="validacion" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button id="cerrar-validacion" type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">x</span>
                    </button>
                </div>
                <div id="validaciones-contenido" class="modal-body">


                </div>
                <div class="modal-footer">

                </div>
            </div>
        </div>
    </div>




<table class="TablaClientes">
    <tr>
        <th></th>
        <th>N°</th>
        <th>Razón Social</th>
        <th>Nombres</th>
        <th>Apellidos</th>
        <th>Teléfono</th>
        <th>Dirección</th>
    </tr>
   
</table>

<script type="text/javascript">

    function validatenames(evt) {
        var theEvent = evt || window.event;

        // Handle paste
        if (theEvent.type === 'paste') {
            key = event.clipboardData.getData('text/plain');
        } else {
            // Handle key press
            var key = theEvent.keyCode || theEvent.which;
            key = String.fromCharCode(key);
        }
        var regex = /[a-zA-Z\s]|\./;
        if (!regex.test(key)) {
            theEvent.returnValue = false;
            if (theEvent.preventDefault) theEvent.preventDefault();
        }
    }

    function validatenum(evt) {
        var theEvent = evt || window.event;

        // Handle paste
        if (theEvent.type === 'paste') {
            key = event.clipboardData.getData('text/plain');
        } else {
            // Handle key press
            var key = theEvent.keyCode || theEvent.which;
            key = String.fromCharCode(key);
        }
        var regex = /[-+0-9\s]|\./;
        if (!regex.test(key)) {
            theEvent.returnValue = false;
            if (theEvent.preventDefault) theEvent.preventDefault();
        }
    }

    $(function () {
        $("#AgregarCB").click(function () {
            window.location.href = "#VAgregarC";
        });
    });
    $(function () {
        $("#CerrarVentanaAgregarC").click(function () {
            window.location.href = "clientes";
        });
    });

    $(function () {
        $("#ModificarCB").click(function () {
            window.location.href = "#VModificarC";
        });
    });
    $(function () {
        $("#CerrarVentanaModificarC").click(function () {
            window.location.href = "clientes";
        });
    });



    $(function () {
        $("#EliminarCB").click(function () {
            window.location.href = "#VEliminarC";
        });
    });
    $(function () {
        $("#CerrarVentanaEliminarC").click(function () {
            window.location.href = "clientes";
        });
    });
    $(function () {
        $("#NoEliminarCliente").click(function () {
            window.location.href = "clientes";
        });
    });


    $(function () {
        $("#Español").click(function () {
            window.location.href = "/es/perfil/clientes";
        });
    });
    $(function () {
        $("#English").click(function () {
            window.location.href = "/en/profile/customers";
        });
    });

</script>